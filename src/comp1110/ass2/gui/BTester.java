package comp1110.ass2.gui;

import comp1110.ass2.BlueLagoon;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class BTester {
    //Test for task 7
    @Test
    void isMoveValidTest(){
        String stateString = "a 13 2; c 0 E; i 6 0,0 0,1 0,2 0,3 1,0 1,1 1,2 1,3 1,4 2,0 2,1; i 6 0,5 0,6 0,7 1,6 1,7 1,8 2,6 2,7 2,8 3,7 3,8; i 6 7,12 8,11 9,11 9,12 10,10 10,11 11,10 11,11 11,12 12,10 12,11; i 8 0,9 0,10 0,11 1,10 1,11 1,12 2,10 2,11 3,10 3,11 3,12 4,10 4,11 5,11 5,12; i 8 4,0 5,0 5,1 6,0 6,1 7,0 7,1 7,2 8,0 8,1 8,2 9,0 9,1 9,2; i 8 10,3 10,4 11,0 11,1 11,2 11,3 11,4 11,5 12,0 12,1 12,2 12,3 12,4 12,5; i 10 3,3 3,4 3,5 4,2 4,3 4,4 4,5 5,3 5,4 5,5 5,6 6,3 6,4 6,5 6,6 7,4 7,5 7,6 8,4 8,5; i 10 5,8 5,9 6,8 6,9 7,8 7,9 7,10 8,7 8,8 8,9 9,7 9,8 9,9 10,6 10,7 10,8 11,7 11,8 12,7 12,8; s 0,0 0,5 0,9 1,4 1,8 1,12 2,1 3,5 3,7 3,10 3,12 4,0 4,2 5,9 5,11 6,3 6,6 7,0 7,8 7,12 8,2 8,5 9,0 9,9 10,3 10,6 10,10 11,0 11,5 12,2 12,8 12,11; r C B W P S; p 0 0 0 0 0 0 0 S T; p 1 0 0 0 0 0 0 S T;";
        Assertions.assertTrue(BlueLagoon.isMoveValid(stateString,"S 2,3"));
    }

    //Test for task 8
    @Test
    void generateAllValidMovesTest(){
        String stateString = "a 13 2; c 0 E; i 6 0,0 0,1 0,2 0,3 1,0 1,1 1,2 1,3 1,4 2,0 2,1; i 6 0,5 0,6 0,7 1,6 1,7 1,8 2,6 2,7 2,8 3,7 3,8; i 6 7,12 8,11 9,11 9,12 10,10 10,11 11,10 11,11 11,12 12,10 12,11; i 8 0,9 0,10 0,11 1,10 1,11 1,12 2,10 2,11 3,10 3,11 3,12 4,10 4,11 5,11 5,12; i 8 4,0 5,0 5,1 6,0 6,1 7,0 7,1 7,2 8,0 8,1 8,2 9,0 9,1 9,2; i 8 10,3 10,4 11,0 11,1 11,2 11,3 11,4 11,5 12,0 12,1 12,2 12,3 12,4 12,5; i 10 3,3 3,4 3,5 4,2 4,3 4,4 4,5 5,3 5,4 5,5 5,6 6,3 6,4 6,5 6,6 7,4 7,5 7,6 8,4 8,5; i 10 5,8 5,9 6,8 6,9 7,8 7,9 7,10 8,7 8,8 8,9 9,7 9,8 9,9 10,6 10,7 10,8 11,7 11,8 12,7 12,8; s 0,0 0,5 0,9 1,4 1,8 1,12 2,1 3,5 3,7 3,10 3,12 4,0 4,2 5,9 5,11 6,3 6,6 7,0 7,8 7,12 8,2 8,5 9,0 9,9 10,3 10,6 10,10 11,0 11,5 12,2 12,8 12,11; r C B W P S; p 0 0 0 0 0 0 0 S T; p 1 0 0 0 0 0 0 S T;";

        String[] Result = {"S 3,0", "S 0,4", "S 2,2", "S 3,1", "S 2,3", "S 3,2", "S 4,1", "S 1,5", "S 2,4", "S 2,5", "S 5,2", "S 0,8", "S 6,2", "S 3,6", "S 1,9", "S 4,6", "S 7,3", "S 2,9", "S 4,7", "S 9,3", "S 3,9", "S 4,8", "S 5,7", "S 8,3", "S 4,9", "S 6,7", "S 8,6", "S 9,5", "S 7,7", "S 9,4", "S 9,6", "S 7,11", "S 5,10", "S 9,10", "S 12,6", "S 10,9", "S 11,9", "S 12,9", "S 10,5", "S 11,6", "S 10,0", "S 10,1", "S 10,2", "S 6,10", "S 6,11", "S 8,10"};

        String Result1 = "S 3,0, S 0,4, S 2,2, S 3,1, S 2,3, S 3,2, S 4,1, S 1,5, S 2,4, S 2,5, S 5,2, S 0,8, S 6,2, S 3,6, S 1,9, S 4,6, S 7,3, S 2,9, S 4,7, S 9,3, S 3,9, S 4,8, S 5,7, S 8,3, S 4,9, S 6,7, S 8,6, S 9,5, S 7,7, S 9,4, S 9,6, S 7,11, S 5,10, S 9,10, S 12,6, S 10,9, S 11,9, S 12,9, S 10,5, S 11,6, S 10,0, S 10,1, S 10,2, S 6,10, S 6,11, S 8,10";
        //to solve extra , and space in Actual
        Result1 = Result1 + "," + " ";
        String Actual = "";
        for (String containers: BlueLagoon.generateAllValidMoves(stateString)){
            Actual = Actual + containers + "," + " ";
        }
        Assertions.assertTrue(Actual.equals(Result1));
    }

    //Test for relative methods
    @Test
    void getAllPlayersTest() {
        String stateString = "a 13 2; c 0 E; i 6 0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 0,10 0,11 1,0 1,12 2,0 2,11 3,0 3,12 4,0 4,11 5,0 5,12 6,0 6,11 7,0 7,12 8,0 8,11 9,0 9,12 10,0 10,11 11,0 11,12 12,0 12,1 12,2 12,3 12,4 12,5 12,6 12,7 12,8 12,9 12,10 12,11; i 6 2,4 2,5 2,6 2,7; i 9 4,4 4,5 4,6 4,7; i 9 6,5 6,6 7,5 7,7 8,5 8,6; i 12 2,2 3,2 3,3 4,2 5,2 5,3 6,2 7,2 7,3; i 12 2,9 3,9 3,10 4,9 5,9 5,10 6,9 7,9 7,10; i 12 9,2 9,10 10,2 10,3 10,4 10,5 10,6 10,7 10,8 10,9; s 0,3 0,8 1,0 1,12 2,2 2,4 2,7 2,9 4,2 4,5 4,6 4,9 5,0 5,12 6,2 6,5 6,6 6,9 8,0 8,5 8,6 8,11 9,2 9,10 10,3 10,5 10,6 10,8 11,0 11,12 12,4 12,7;r C 1,1 2,1 10,12 B 1,2 10,10 W 11,11 12,12 P 1,4 11,12 S 12,11 10,12; p 0 0 0 0 0 0 0 S T; p 1 0 0 0 0 0 0 S 1,5 2,6 3,7 T 6,9 100,5; p 1 0 0 0 0 0 0 S 5,8 T 9,10;";
        String[] Result = {"p", "0", "S", "T", "p", "1", "S", "1,5", "2,6", "3,7", "T", "6,9", "100,5", "p", "2", "S", "5,8", "T", "9,10"};
        Assertions.assertArrayEquals(Result,BlueLagoon.getAllPlayers(stateString).toArray());
    }

    @Test
    void getStoneStatementTest(){
        String stateString = "a 13 2; c 0 E; i 6 0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 0,10 0,11 1,0 1,12 2,0 2,11 3,0 3,12 4,0 4,11 5,0 5,12 6,0 6,11 7,0 7,12 8,0 8,11 9,0 9,12 10,0 10,11 11,0 11,12 12,0 12,1 12,2 12,3 12,4 12,5 12,6 12,7 12,8 12,9 12,10 12,11; i 6 2,4 2,5 2,6 2,7; i 9 4,4 4,5 4,6 4,7; i 9 6,5 6,6 7,5 7,7 8,5 8,6; i 12 2,2 3,2 3,3 4,2 5,2 5,3 6,2 7,2 7,3; i 12 2,9 3,9 3,10 4,9 5,9 5,10 6,9 7,9 7,10; i 12 9,2 9,10 10,2 10,3 10,4 10,5 10,6 10,7 10,8 10,9; s 0,3 0,8 1,0 1,12 2,2 2,4 2,7 2,9 4,2 4,5 4,6 4,9 5,0 5,12 6,2 6,5 6,6 6,9 8,0 8,5 8,6 8,11 9,2 9,10 10,3 10,5 10,6 10,8 11,0 11,12 12,4 12,7;r C 1,1 2,1 10,12 B 1,2 10,10 W 11,11 12,12 P 1,4 11,12 S 12,11 10,12; p 0 0 0 0 0 0 0 S T; p 1 0 0 0 0 0 0 S 1,5 2,6 3,7 T 6,9 100,5; p 1 0 0 0 0 0 0 S 5,8 T 9,10;";
        String Result = " s 0,3 0,8 1,0 1,12 2,2 2,4 2,7 2,9 4,2 4,5 4,6 4,9 5,0 5,12 6,2 6,5 6,6 6,9 8,0 8,5 8,6 8,11 9,2 9,10 10,3 10,5 10,6 10,8 11,0 11,12 12,4 12,7";
        Assertions.assertTrue(BlueLagoon.getStoneStatement(stateString).equals(Result));
    }
}
